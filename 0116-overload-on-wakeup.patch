From 9f51d48b24a7774d490db8490ee4215cf5b74a4e Mon Sep 17 00:00:00 2001
From: jplozi <jplozi@unice.fr>
Date: Fri, 11 Mar 2016 15:18:06 +0100
Subject: [PATCH 116/124] overload on wakeup

source https://github.com/jplozi/wastedcores

as an experiment, apply the learnings from the wasted-cores paper
and see how the performance works out. With the data from this we should
be able to work with Peter and the rest of the scheduler folks on
a more permanent/elegant solution.
---
 kernel/sched/fair.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 166cd01..4fe11e8 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -4937,6 +4937,20 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 		want_affine = !wake_wide(p) && cpumask_test_cpu(cpu, tsk_cpus_allowed(p));
 
 	rcu_read_lock();
+
+	if (cpu_rq(prev_cpu)->nr_running) {
+		int _cpu;
+
+		for_each_online_cpu(_cpu) {
+			if (!cpumask_test_cpu(_cpu, tsk_cpus_allowed(p)) ||
+				cpu_rq(_cpu)->nr_running)
+				continue;
+
+			rcu_read_unlock();
+			return _cpu;
+		}
+	}
+
 	for_each_domain(cpu, tmp) {
 		if (!(tmp->flags & SD_LOAD_BALANCE))
 			break;
-- 
2.9.0

